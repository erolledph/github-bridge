// GitHub Bridge Extension - Main Popup Script
class GitHubBridge {
    constructor() {
        this.currentStep = 'auth';
        this.steps = ['auth', 'repository', 'upload', 'push'];
        this.stepIndex = 0;
        this.githubToken = null;
        this.repositories = [];
        this.selectedRepository = null;
        this.uploadedFile = null;
        this.extractedFiles = [];
        this.branches = [];
        this.selectedBranch = 'main';
        
        this.init();
    }

    async init() {
        await this.loadStoredData();
        this.setupEventListeners();
        this.updateUI();
        
        // Check if user is already authenticated
        if (this.githubToken) {
            await this.validateStoredToken();
        }
    }

    async loadStoredData() {
        try {
            const result = await chrome.storage.local.get(['githubToken', 'userProfile']);
            this.githubToken = result.githubToken || null;
            this.userProfile = result.userProfile || null;
        } catch (error) {
            console.error('Failed to load stored data:', error);
        }
    }

    async saveData(data) {
        try {
            await chrome.storage.local.set(data);
        } catch (error) {
            console.error('Failed to save data:', error);
        }
    }

    setupEventListeners() {
        // Authentication
        document.getElementById('githubLoginBtn').addEventListener('click', () => this.handleGitHubLogin());
        document.getElementById('validateTokenBtn').addEventListener('click', () => this.handleTokenValidation());
        document.getElementById('toggleTokenVisibility').addEventListener('click', () => this.toggleTokenVisibility());
        document.getElementById('logoutBtn').addEventListener('click', () => this.handleLogout());

        // Repository
        document.getElementById('repoSearch').addEventListener('input', (e) => this.filterRepositories(e.target.value));
        document.getElementById('createRepoBtn').addEventListener('click', () => this.showCreateRepoForm());
        document.getElementById('cancelCreateRepo').addEventListener('click', () => this.hideCreateRepoForm());
        document.getElementById('confirmCreateRepo').addEventListener('click', () => this.handleCreateRepository());

        // Upload
        document.getElementById('fileInput').addEventListener('change', (e) => this.handleFileSelection(e));
        document.getElementById('browseFiles').addEventListener('click', () => document.getElementById('fileInput').click());
        document.getElementById('removeFile').addEventListener('click', () => this.removeSelectedFile());
        
        // Drag and drop
        const dropZone = document.getElementById('dropZone');
        dropZone.addEventListener('dragover', (e) => this.handleDragOver(e));
        dropZone.addEventListener('dragleave', (e) => this.handleDragLeave(e));
        dropZone.addEventListener('drop', (e) => this.handleDrop(e));

        // Push
        document.getElementById('commitMessage').addEventListener('input', (e) => this.updateCharCount(e.target.value));
        document.getElementById('targetBranch').addEventListener('change', (e) => this.selectedBranch = e.target.value);
        document.getElementById('clearExisting').addEventListener('change', (e) => this.toggleClearWarning(e.target.checked));

        // Navigation
        document.getElementById('backBtn').addEventListener('click', () => this.goToPreviousStep());
        document.getElementById('nextBtn').addEventListener('click', () => this.goToNextStep());

        // Success actions
        document.getElementById('viewOnGithub').addEventListener('click', () => this.openRepositoryOnGitHub());
        document.getElementById('uploadAnother').addEventListener('click', () => this.resetToUpload());

        // Error handling
        document.getElementById('closeError').addEventListener('click', () => this.hideError());
    }

    // Authentication Methods
    async handleGitHubLogin() {
        this.showLoading('Authenticating with GitHub...');
        
        try {
            // Use Chrome identity API for OAuth
            const redirectURL = chrome.identity.getRedirectURL();
            const clientId = ''; // Replace with your actual client ID
            const authURL = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectURL)}&scope=repo user:email`;
            
            const responseUrl = await chrome.identity.launchWebAuthFlow({
                url: authURL,
                interactive: true
            });
            
            if (responseUrl) {
                const code = new URL(responseUrl).searchParams.get('code');
                if (code) {
                    const token = await this.exchangeCodeForToken(code);
                    if (token) {
                        await this.validateAndStoreToken(token);
                    }
                }
            }
        } catch (error) {
            console.error('GitHub OAuth error:', error);
            this.showError('GitHub authentication failed. Please try again.');
        } finally {
            this.hideLoading();
        }
    }

    async exchangeCodeForToken(code) {
        // Note: In a real implementation, you'd need a backend service to exchange the code
        // for a token since the client secret should not be exposed in the extension
        // For now, we'll show an error message directing users to use manual token entry
        this.showError('OAuth flow requires a backend service. Please use manual token entry instead.');
        return null;
    }

    async handleTokenValidation() {
        const token = document.getElementById('tokenInput').value.trim();
        
        if (!token) {
            this.showError('Please enter a GitHub Personal Access Token');
            return;
        }

        if (!token.startsWith('ghp_') && !token.startsWith('github_pat_')) {
            this.showError('Invalid token format. GitHub tokens should start with "ghp_" or "github_pat_"');
            return;
        }

        this.showLoading('Validating token...');

        try {
            const validation = await this.validateToken(token);
            
            if (validation.valid && validation.username) {
                await this.validateAndStoreToken(token);
            } else {
                this.showError('Invalid token or insufficient permissions. Please ensure your token has repo and user:email scopes.');
            }
        } catch (error) {
            console.error('Token validation error:', error);
            this.showError('Failed to validate token. Please check your token and try again.');
        } finally {
            this.hideLoading();
        }
    }

    async validateToken(token) {
        try {
            const response = await fetch('https://api.github.com/user', {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (response.ok) {
                const user = await response.json();
                return { valid: true, username: user.login };
            } else {
                return { valid: false };
            }
        } catch (error) {
            console.error('Token validation failed:', error);
            return { valid: false };
        }
    }

    async validateAndStoreToken(token) {
        try {
            const validation = await this.validateToken(token);
            
            if (validation.valid) {
                this.githubToken = token;
                
                // Get user profile
                const userResponse = await fetch('https://api.github.com/user', {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (userResponse.ok) {
                    this.userProfile = await userResponse.json();
                    
                    // Save to storage
                    await this.saveData({
                        githubToken: token,
                        userProfile: this.userProfile
                    });
                    
                    // Update UI
                    this.updateUserProfile();
                    this.goToStep('repository');
                }
            }
        } catch (error) {
            console.error('Token validation and storage failed:', error);
            this.showError('Failed to validate and store token');
        }
    }

    async validateStoredToken() {
        if (!this.githubToken) return;
        
        this.showLoading('Validating stored token...');
        
        try {
            const validation = await this.validateToken(this.githubToken);
            
            if (validation.valid) {
                this.updateUserProfile();
                this.goToStep('repository');
            } else {
                // Token is invalid, clear it
                await this.clearStoredData();
                this.showError('Stored token is invalid. Please authenticate again.');
            }
        } catch (error) {
            console.error('Stored token validation failed:', error);
            this.showError('Failed to validate stored token. Please authenticate again.');
        } finally {
            this.hideLoading();
        }
    }

    async clearStoredData() {
        this.githubToken = null;
        this.userProfile = null;
        await chrome.storage.local.clear();
    }

    toggleTokenVisibility() {
        const tokenInput = document.getElementById('tokenInput');
        const toggleBtn = document.getElementById('toggleTokenVisibility');
        
        if (tokenInput.type === 'password') {
            tokenInput.type = 'text';
            toggleBtn.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                    <line x1="1" y1="1" x2="23" y2="23"></line>
                </svg>
            `;
        } else {
            tokenInput.type = 'password';
            toggleBtn.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                </svg>
            `;
        }
    }

    async handleLogout() {
        await this.clearStoredData();
        this.goToStep('auth');
        this.updateUI();
    }

    updateUserProfile() {
        if (this.userProfile) {
            const userProfile = document.getElementById('userProfile');
            const userAvatar = document.getElementById('userAvatar');
            
            userProfile.classList.remove('hidden');
            userAvatar.src = this.userProfile.avatar_url;
            userAvatar.alt = this.userProfile.login;
        }
    }

    // Repository Methods
    async loadRepositories() {
        if (!this.githubToken) return;
        
        const repositoryList = document.getElementById('repositoryList');
        repositoryList.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>Loading repositories...</p>
            </div>
        `;

        try {
            const response = await fetch('https://api.github.com/user/repos?sort=updated&per_page=100', {
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (response.ok) {
                this.repositories = await response.json();
                this.displayRepositories(this.repositories);
            } else {
                throw new Error('Failed to fetch repositories');
            }
        } catch (error) {
            console.error('Failed to load repositories:', error);
            repositoryList.innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <p>Failed to load repositories. Please try again.</p>
                    <button onclick="window.githubBridge.loadRepositories()" class="btn btn-primary mt-4">
                        Retry
                    </button>
                </div>
            `;
        }
    }

    displayRepositories(repos) {
        const repositoryList = document.getElementById('repositoryList');
        
        if (repos.length === 0) {
            repositoryList.innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <p>No repositories found.</p>
                </div>
            `;
            return;
        }

        repositoryList.innerHTML = repos.map(repo => `
            <div class="repository-item" onclick="window.githubBridge.selectRepository(${repo.id})">
                <img src="${repo.owner.avatar_url}" alt="${repo.owner.login}" class="repo-avatar">
                <div class="repo-info">
                    <div class="repo-name">
                        ${repo.name}
                        ${repo.private ? 
                            '<svg class="repo-visibility" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>' :
                            '<svg class="repo-visibility" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><path d="M2 12h20"></path></svg>'
                        }
                    </div>
                    ${repo.description ? `<div class="repo-description">${repo.description}</div>` : ''}
                    <div class="repo-updated">Updated ${new Date(repo.updated_at).toLocaleDateString()}</div>
                </div>
            </div>
        `).join('');
    }

    filterRepositories(searchTerm) {
        if (!searchTerm) {
            this.displayRepositories(this.repositories);
            return;
        }

        const filtered = this.repositories.filter(repo =>
            repo.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            (repo.description && repo.description.toLowerCase().includes(searchTerm.toLowerCase()))
        );

        this.displayRepositories(filtered);
    }

    selectRepository(repoId) {
        this.selectedRepository = this.repositories.find(repo => repo.id === repoId);
        if (this.selectedRepository) {
            this.goToStep('upload');
        }
    }

    showCreateRepoForm() {
        document.getElementById('createRepoForm').classList.remove('hidden');
    }

    hideCreateRepoForm() {
        document.getElementById('createRepoForm').classList.add('hidden');
        document.getElementById('newRepoName').value = '';
        document.getElementById('newRepoDescription').value = '';
        document.getElementById('newRepoPrivate').checked = false;
    }

    async handleCreateRepository() {
        const name = document.getElementById('newRepoName').value.trim();
        const description = document.getElementById('newRepoDescription').value.trim();
        const isPrivate = document.getElementById('newRepoPrivate').checked;

        if (!name) {
            this.showError('Repository name is required');
            return;
        }

        if (!/^[a-zA-Z0-9._-]+$/.test(name)) {
            this.showError('Repository name can only contain letters, numbers, dots, hyphens, and underscores');
            return;
        }

        this.showLoading('Creating repository...');

        try {
            const response = await fetch('https://api.github.com/user/repos', {
                method: 'POST',
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name,
                    description: description || undefined,
                    private: isPrivate,
                    auto_init: true
                })
            });

            if (response.ok) {
                const newRepo = await response.json();
                this.repositories.unshift(newRepo);
                this.displayRepositories(this.repositories);
                this.hideCreateRepoForm();
                this.selectRepository(newRepo.id);
            } else {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create repository');
            }
        } catch (error) {
            console.error('Repository creation error:', error);
            this.showError(error.message || 'Failed to create repository');
        } finally {
            this.hideLoading();
        }
    }

    // File Upload Methods
    handleDragOver(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.add('drag-over');
    }

    handleDragLeave(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.remove('drag-over');
    }

    handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    }

    handleFileSelection(e) {
        const files = e.target.files;
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    }

    async processFile(file) {
        if (!file.name.endsWith('.zip')) {
            this.showError('Please upload a ZIP file');
            return;
        }

        this.showLoading('Processing ZIP file...');

        try {
            const zip = new JSZip();
            const zipContent = await zip.loadAsync(file);
            
            const extractedFiles = [];
            
            // Get all file paths to detect common root folder
            const allPaths = Object.keys(zipContent.files).filter(path => !zipContent.files[path].dir);
            
            // Find common root folder
            let commonRoot = '';
            if (allPaths.length > 0) {
                const firstPath = allPaths[0];
                const pathParts = firstPath.split('/');
                
                if (pathParts.length > 1) {
                    const potentialRoot = pathParts[0] + '/';
                    const allHaveSameRoot = allPaths.every(path => path.startsWith(potentialRoot));
                    
                    if (allHaveSameRoot) {
                        commonRoot = potentialRoot;
                    }
                }
            }
            
            // Process each file
            for (const [relativePath, zipEntry] of Object.entries(zipContent.files)) {
                if (!zipEntry.dir) {
                    try {
                        let finalPath = relativePath;
                        if (commonRoot && relativePath.startsWith(commonRoot)) {
                            finalPath = relativePath.substring(commonRoot.length);
                        }
                        
                        if (!finalPath) continue;
                        
                        let content;
                        try {
                            content = await zipEntry.async('string');
                        } catch {
                            content = await zipEntry.async('uint8array');
                        }
                        
                        extractedFiles.push({
                            path: finalPath,
                            content: content,
                            isDirectory: false
                        });
                    } catch (err) {
                        console.warn(`Failed to extract file ${relativePath}:`, err);
                    }
                }
            }
            
            this.uploadedFile = {
                name: file.name,
                size: file.size,
                content: file,
                extractedFiles: extractedFiles
            };

            this.displayFilePreview();
            this.goToStep('push');
        } catch (error) {
            console.error('ZIP processing error:', error);
            this.showError('Failed to process ZIP file. Please ensure it\'s a valid ZIP archive.');
        } finally {
            this.hideLoading();
        }
    }

    displayFilePreview() {
        const filePreview = document.getElementById('filePreview');
        const fileName = document.getElementById('fileName');
        const fileSize = document.getElementById('fileSize');
        const fileCount = document.getElementById('fileCount');
        const fileList = document.getElementById('fileList');

        fileName.textContent = this.uploadedFile.name;
        fileSize.textContent = `${(this.uploadedFile.size / 1024 / 1024).toFixed(2)} MB`;
        fileCount.textContent = `${this.uploadedFile.extractedFiles.length} files`;

        fileList.innerHTML = this.uploadedFile.extractedFiles.slice(0, 10).map(file => `
            <div class="file-item">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"></path>
                </svg>
                <span>${file.path}</span>
            </div>
        `).join('');

        if (this.uploadedFile.extractedFiles.length > 10) {
            fileList.innerHTML += `
                <div class="file-item" style="font-style: italic; color: #9ca3af;">
                    ... and ${this.uploadedFile.extractedFiles.length - 10} more files
                </div>
            `;
        }

        filePreview.classList.remove('hidden');
    }

    removeSelectedFile() {
        this.uploadedFile = null;
        document.getElementById('filePreview').classList.add('hidden');
        document.getElementById('fileInput').value = '';
    }

    // Push Methods
    async setupPushStep() {
        if (!this.selectedRepository || !this.uploadedFile) return;

        // Update repository info
        document.getElementById('selectedRepoAvatar').src = this.selectedRepository.owner.avatar_url;
        document.getElementById('selectedRepoName').textContent = this.selectedRepository.full_name;
        document.getElementById('selectedRepoDescription').textContent = 
            this.selectedRepository.description || 'No description';

        // Set default commit message
        const commitMessage = document.getElementById('commitMessage');
        commitMessage.value = `Upload project from Bolt.new: ${this.uploadedFile.name.replace('.zip', '')}`;
        this.updateCharCount(commitMessage.value);

        // Load branches
        await this.loadBranches();
        
        // Compare files
        await this.compareFiles();
    }

    async loadBranches() {
        try {
            const response = await fetch(
                `https://api.github.com/repos/${this.selectedRepository.full_name}/branches?per_page=100`,
                {
                    headers: {
                        'Authorization': `token ${this.githubToken}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );

            if (response.ok) {
                this.branches = await response.json();
                const branchSelect = document.getElementById('targetBranch');
                branchSelect.innerHTML = this.branches.map(branch => 
                    `<option value="${branch.name}" ${branch.name === this.selectedRepository.default_branch ? 'selected' : ''}>
                        ${branch.name}
                    </option>`
                ).join('');
                this.selectedBranch = this.selectedRepository.default_branch;
            }
        } catch (error) {
            console.error('Failed to load branches:', error);
        }
    }

    async compareFiles() {
        // For simplicity, we'll assume all files are new
        // In a real implementation, you'd compare with existing repository files
        const fileChanges = document.getElementById('fileChanges');
        fileChanges.innerHTML = `
            <div class="change-summary">
                <div class="change-stat new">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                    ${this.uploadedFile.extractedFiles.length} new files
                </div>
            </div>
        `;
    }

    updateCharCount(message) {
        document.getElementById('messageLength').textContent = message.length;
    }

    toggleClearWarning(checked) {
        const warning = document.getElementById('clearWarning');
        if (checked) {
            warning.classList.remove('hidden');
        } else {
            warning.classList.add('hidden');
        }
    }

    async handlePushToRepository() {
        const commitMessage = document.getElementById('commitMessage').value.trim();
        const clearExisting = document.getElementById('clearExisting').checked;

        if (!commitMessage) {
            this.showError('Please enter a commit message');
            return;
        }

        this.showLoading('Pushing to repository...');
        
        try {
            await this.uploadFilesToRepository(commitMessage, clearExisting);
            this.goToStep('success');
        } catch (error) {
            console.error('Push failed:', error);
            this.showError(error.message || 'Failed to push to repository');
        } finally {
            this.hideLoading();
        }
    }

    async uploadFilesToRepository(commitMessage, clearExisting) {
        const owner = this.selectedRepository.owner.login;
        const repo = this.selectedRepository.name;
        const branch = this.selectedBranch;

        // Get current commit SHA
        let currentCommitSha;
        try {
            const branchResponse = await fetch(
                `https://api.github.com/repos/${owner}/${repo}/branches/${branch}`,
                {
                    headers: {
                        'Authorization': `token ${this.githubToken}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );
            
            if (branchResponse.ok) {
                const branchData = await branchResponse.json();
                currentCommitSha = branchData.commit.sha;
            } else {
                // Branch doesn't exist, create from default branch
                const defaultBranchResponse = await fetch(
                    `https://api.github.com/repos/${owner}/${repo}/branches/${this.selectedRepository.default_branch}`,
                    {
                        headers: {
                            'Authorization': `token ${this.githubToken}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    }
                );
                const defaultBranchData = await defaultBranchResponse.json();
                currentCommitSha = defaultBranchData.commit.sha;
            }
        } catch (error) {
            throw new Error('Failed to get current commit SHA');
        }

        // Get current tree
        const currentCommitResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/commits/${currentCommitSha}`,
            {
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            }
        );
        const currentCommit = await currentCommitResponse.json();

        // Create tree entries
        const treeEntries = this.uploadedFile.extractedFiles
            .filter(file => !file.isDirectory)
            .map(file => ({
                path: file.path,
                mode: '100644',
                type: 'blob',
                ...(typeof file.content === 'string' 
                    ? { content: file.content }
                    : { 
                        content: btoa(String.fromCharCode(...new Uint8Array(file.content))),
                        encoding: 'base64'
                    }
                ),
            }));

        // Create new tree
        const treeResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/trees`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    tree: treeEntries,
                    base_tree: clearExisting ? undefined : currentCommit.tree.sha
                })
            }
        );

        if (!treeResponse.ok) {
            throw new Error('Failed to create tree');
        }

        const newTree = await treeResponse.json();

        // Create new commit
        const commitResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/commits`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: commitMessage,
                    tree: newTree.sha,
                    parents: [currentCommitSha]
                })
            }
        );

        if (!commitResponse.ok) {
            throw new Error('Failed to create commit');
        }

        const newCommit = await commitResponse.json();

        // Update branch reference
        const refResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/refs/heads/${branch}`,
            {
                method: 'PATCH',
                headers: {
                    'Authorization': `token ${this.githubToken}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sha: newCommit.sha
                })
            }
        );

        if (!refResponse.ok) {
            throw new Error('Failed to update branch reference');
        }
    }

    // Success Methods
    openRepositoryOnGitHub() {
        const url = `${this.selectedRepository.html_url}/tree/${this.selectedBranch}`;
        chrome.tabs.create({ url });
    }

    resetToUpload() {
        this.uploadedFile = null;
        this.selectedRepository = null;
        document.getElementById('filePreview').classList.add('hidden');
        document.getElementById('fileInput').value = '';
        this.goToStep('repository');
    }

    // Navigation Methods
    goToStep(step) {
        this.currentStep = step;
        this.stepIndex = this.steps.indexOf(step);
        this.updateUI();
    }

    goToPreviousStep() {
        if (this.stepIndex > 0) {
            this.stepIndex--;
            this.currentStep = this.steps[this.stepIndex];
            this.updateUI();
        }
    }

    goToNextStep() {
        if (this.stepIndex < this.steps.length - 1) {
            this.stepIndex++;
            this.currentStep = this.steps[this.stepIndex];
            this.updateUI();
        }
    }

    // UI Methods
    updateUI() {
        // Update step indicator
        const stepIndicator = document.getElementById('stepIndicator');
        const navigation = document.getElementById('navigation');
        
        if (this.githubToken) {
            stepIndicator.classList.remove('hidden');
            navigation.classList.remove('hidden');
        } else {
            stepIndicator.classList.add('hidden');
            navigation.classList.add('hidden');
        }

        // Update step indicator
        document.querySelectorAll('.step').forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index === this.stepIndex) {
                step.classList.add('active');
            } else if (index < this.stepIndex) {
                step.classList.add('completed');
            }
        });

        // Update step content
        document.querySelectorAll('.step-content').forEach(content => {
            content.classList.remove('active');
        });
        
        const currentStepContent = document.getElementById(`${this.currentStep}Step`);
        if (currentStepContent) {
            currentStepContent.classList.add('active');
        }

        // Update navigation buttons
        const backBtn = document.getElementById('backBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        if (backBtn && nextBtn) {
            backBtn.disabled = this.stepIndex === 0;
            nextBtn.disabled = this.stepIndex === this.steps.length - 1 || !this.canProceedToNextStep();
        }

        // Load step-specific data
        this.loadStepData();
    }

    canProceedToNextStep() {
        switch (this.currentStep) {
            case 'auth':
                return !!this.githubToken;
            case 'repository':
                return !!this.selectedRepository;
            case 'upload':
                return !!this.uploadedFile;
            case 'push':
                return false; // Push step doesn't have a next step
            default:
                return false;
        }
    }

    async loadStepData() {
        switch (this.currentStep) {
            case 'repository':
                await this.loadRepositories();
                break;
            case 'push':
                await this.setupPushStep();
                break;
        }
    }

    showLoading(message = 'Loading...') {
        const loadingOverlay = document.getElementById('loadingOverlay');
        const loadingMessage = document.getElementById('loadingMessage');
        loadingMessage.textContent = message;
        loadingOverlay.classList.remove('hidden');
    }

    hideLoading() {
        document.getElementById('loadingOverlay').classList.add('hidden');
    }

    showError(message) {
        const errorContainer = document.getElementById('errorContainer');
        const errorMessage = document.getElementById('errorMessage');
        errorMessage.textContent = message;
        errorContainer.classList.remove('hidden');
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
            this.hideError();
        }, 5000);
    }

    hideError() {
        document.getElementById('errorContainer').classList.add('hidden');
    }
}

// Initialize the extension when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.githubBridge = new GitHubBridge();
});

// Add event listeners for push step
document.addEventListener('DOMContentLoaded', () => {
    const nextBtn = document.getElementById('nextBtn');
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (window.githubBridge.currentStep === 'push') {
                window.githubBridge.handlePushToRepository();
            } else {
                window.githubBridge.goToNextStep();
            }
        });
    }
});